daySub$Date <- as.POSIXct(daySub$Date, format="%H:%M:%S")
z <- read.zoo(daySub, header = TRUE)
plot(z, xaxt = "n", ylab="Average Global Active Power", xlab="Time of Day", col="red", plot.type = "single")
axis(1, daySub$Date, format(daySub$Date, "%H:%M:%S"), cex.axis = .7)
summary(daySub)
s <- with( train , train[ hour(DateTime) >= 00 | hour(DateTime) < 6, ] )
s <- with( train , train[ hour(DateTime) >= 00 & hour(DateTime) < 6, ] )
k=13
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
s <- with( train , train[ hour(DateTime) >= 00 & hour(DateTime) < 6, ] )
muVec[1] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[1] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 7  & (hour(DateTime) <= 9 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[2] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[2] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 7  & (hour(DateTime) <= 9 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 & month(DateTime) > 3), ] )
muVec[3] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[3] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 12 & minute(DateTime) >= 30) & hour(DateTime) < 14) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[4] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[4] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 12 & minute(DateTime) >= 30) & hour(DateTime) < 14) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[5] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[5] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 15 & minute(DateTime) <= 30) & (hour(DateTime) <= 17 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[6] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[6] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 15 & minute(DateTime) <= 30) & (hour(DateTime) <= 17 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[7] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[7] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 18 & (hour(DateTime) <= 21 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[8] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[8] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 18  & (hour(DateTime) <= 21 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[9] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[9] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 22 & hour(DateTime) <= 23) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[10] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[10] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 22 & hour(DateTime) <= 23) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[11] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[11] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 10 & hour(DateTime) < 12) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[12] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[12] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 10 & hour(DateTime) < 12) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[13] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[13] <- var(s$Global_active_power, na.rm = TRUE)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
s <- with( train , train[ (hour(DateTime) >= 7  & (hour(DateTime) <= 9 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 & month(DateTime) > 3), ] )
summary(s)
mean(s$Global_active_power, na.rm = TRUE)
k=12
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
s <- with( train , train[ hour(DateTime) >= 00 & hour(DateTime) < 6, ] )
muVec[1] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[1] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 7  & (hour(DateTime) <= 9 & minute(DateTime) <= 30)), ] )
muVec[2] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[2] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 12 & minute(DateTime) >= 30) & hour(DateTime) < 14) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[3] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[3] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 12 & minute(DateTime) >= 30) & hour(DateTime) < 14) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[4] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[4] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 15 & minute(DateTime) <= 30) & (hour(DateTime) <= 17 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[5] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[5] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 15 & minute(DateTime) <= 30) & (hour(DateTime) <= 17 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[6] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[6] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 18 & (hour(DateTime) <= 21 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[7] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[7] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 18  & (hour(DateTime) <= 21 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[8] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[8] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 22 & hour(DateTime) <= 23) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[9] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[9] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 22 & hour(DateTime) <= 23) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[10] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[10] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 10 & hour(DateTime) < 12) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[11] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[11] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 10 & hour(DateTime) < 12) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[12] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[12] <- var(s$Global_active_power, na.rm = TRUE)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
JanDay <- hourly %>% filter(Date >= '2007-01-11 00:59:00' & Date <= '2007-01-11 23:59:00')
JanDay$Date <- strftime(JanDay$Date, format="%H:%M:%S")
JanDay$Date <- as.POSIXct(JanDay$Date, format="%H:%M:%S")
JulyDay <- hourly %>% filter(Date >= '2007-07-11 00:59:00' & Date <= '2007-07-11 23:59:00')
JulyDay$Date <- strftime(JulyDay$Date, format="%H:%M:%S")
JulyDay$Date <- as.POSIXct(JulyDay$Date, format="%H:%M:%S")
total <- merge(x = JanDay, y = JulyDay, by = "Date", all.x = TRUE)
colnames(total) <- c("Date", "Jan 9, 2007", "July 9, 2007")
z <- read.zoo(total, header = TRUE)
plot(z, xaxt = "n", ylab="Average Global Active Power", xlab="Time of Day", col=c("red","green"), plot.type = "single")
axis(1, total$Date, format(total$Date, "%H:%M:%S"), cex.axis = .7)
legend('topleft', names(total)[-1] ,lty=1, col=c("red","green"), bty='n', cex=.75)
JanDay <- hourly %>% filter(Date >= '2007-01-09 00:59:00' & Date <= '2007-01-09 23:59:00')
JanDay$Date <- strftime(JanDay$Date, format="%H:%M:%S")
JanDay$Date <- as.POSIXct(JanDay$Date, format="%H:%M:%S")
JulyDay <- hourly %>% filter(Date >= '2007-07-09 00:59:00' & Date <= '2007-07-09 23:59:00')
JulyDay$Date <- strftime(JulyDay$Date, format="%H:%M:%S")
JulyDay$Date <- as.POSIXct(JulyDay$Date, format="%H:%M:%S")
total <- merge(x = JanDay, y = JulyDay, by = "Date", all.x = TRUE)
colnames(total) <- c("Date", "Jan 9, 2007", "July 9, 2007")
z <- read.zoo(total, header = TRUE)
plot(z, xaxt = "n", ylab="Average Global Active Power", xlab="Time of Day", col=c("red","green"), plot.type = "single")
axis(1, total$Date, format(total$Date, "%H:%M:%S"), cex.axis = .7)
legend('topleft', names(total)[-1] ,lty=1, col=c("red","green"), bty='n', cex=.75)
k=12
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
s <- with( train , train[ (hour(DateTime) >= 00 & hour(DateTime) <= 6) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[1] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[1] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 00 & hour(DateTime) <= 6) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[2] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[2] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) > 6  & (hour(DateTime) <= 9 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[3] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[3] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) > 6  & (hour(DateTime) <= 9 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[4] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[4] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 10 & hour(DateTime) < 12) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[5] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[5] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 10 & hour(DateTime) < 12) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[6] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[6] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 12 & minute(DateTime) >= 30) & hour(DateTime) < 14) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[7] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[7] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 12 & minute(DateTime) >= 30) & hour(DateTime) < 14) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[8] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[8] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 15 & minute(DateTime) <= 30) & (hour(DateTime) <= 17 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[9] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[9] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ ((hour(DateTime) >= 15 & minute(DateTime) <= 30) & (hour(DateTime) <= 17 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[10] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[10] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 18 & (hour(DateTime) <= 22 & minute(DateTime) <= 30)) &
(month(DateTime) >= 10 | month(DateTime) <= 3), ] )
muVec[11] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[11] <- var(s$Global_active_power, na.rm = TRUE)
s <- with( train , train[ (hour(DateTime) >= 18  & (hour(DateTime) <= 22 & minute(DateTime) <= 30)) &
(month(DateTime) < 10 | month(DateTime) > 3), ] )
muVec[12] <- mean(s$Global_active_power, na.rm = TRUE)
sigmaVec[12] <- var(s$Global_active_power, na.rm = TRUE)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
muVec <- muVec + 0.1
muVec <- muVec - 0.1
muVec <- muVec * 1.1
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.1, sigma = sigmaVec * 1.1)
b
b <- list(mu = muVec * 1.1, sigma = sigmaVec * 1.1)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.2, sigma = sigmaVec * 1.2)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.15, sigma = sigmaVec * 1.15)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.05, sigma = sigmaVec * 1.05)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.08, sigma = sigmaVec * 1.08)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.11, sigma = sigmaVec * 1.11)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[11] <- muVec[11] * 1.1
sigmaVec[11] <- sigmaVec[11] * 1.1
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[11] <- muVec[11] * 1.5
sigmaVec[11] <- sigmaVec[11] * 1.5
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[12] <- muVec[12] * 1.5
sigmaVec[12] <- sigmaVec[12] * 1.5
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[12] <- muVec[1] * 1.5
sigmaVec[12] <- sigmaVec[1] * 1.5
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[12] <- muVec[1] * 0.8
sigmaVec[12] <- sigmaVec[1] * 0.8
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
muVec[11] <- muVec[1] * 0.8
sigmaVec[11] <- sigmaVec[1] * 0.8
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
muVec[1] <- muVec[1] * 0.8
sigmaVec[1] <- sigmaVec[1] * 0.8
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
