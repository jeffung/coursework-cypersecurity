difference <- abs(expected - validationset[i])
#  probability <- difference / (sqrt(alpha) * 2 * threshold)
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
precision
recall
difference <- 0
probability <- 0
threshold <- 1.5
probThreshold <- 0.75
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm_8$model$parms.emission$mu[state]
alpha <- hmm_8$model$parms.emission$sigma[state]
difference <- abs(expected - validationset[i])
#  probability <- difference / (sqrt(alpha) * 2 * threshold)
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
precision
recall
difference <- 0
probability <- 0
threshold <- 2
probThreshold <- 0.75
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm_8$model$parms.emission$mu[state]
alpha <- hmm_8$model$parms.emission$sigma[state]
difference <- abs(expected - validationset[i])
#  probability <- difference / (sqrt(alpha) * 2 * threshold)
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
precision
recall
difference <- 0
probability <- 0
threshold <- 2
probThreshold <- 0.75
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm_8$model$parms.emission$mu[state]
alpha <- hmm_8$model$parms.emission$sigma[state]
difference <- abs(expected - validationset[i])
probability <- difference / (sqrt(alpha) * threshold)
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
precision
recall
difference <- 0
probability <- 0
threshold <- 2
probThreshold <- 0.75
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm_8$model$parms.emission$mu[state]
alpha <- hmm_8$model$parms.emission$sigma[state]
difference <- abs(expected - validationset[i])
probability <- difference / (sqrt(alpha) * threshold)
if (probability >= probThreshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
precision
recall
difference <- 0
threshold <- 2
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm_8$model$parms.emission$mu[state]
alpha <- hmm_8$model$parms.emission$sigma[state]
difference <- abs(expected - validationset[i])
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
precision
recall
difference <- 0
threshold <- 2
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm_8$model$parms.emission$mu[state]
alpha <- hmm_8$model$parms.emission$sigma[state]
difference <- abs(expected - validationset[i])
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
precision <- actualAnomalies / detectedAnomalies
recall <- actualAnomalies / totalAnomalies
fScore <- (2 * precision * recall) / (precision + recall)
precision
recall
fScore
library(RCurl)
#Get URL's from GitHub for train and test data
trainURL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Train/train.txt")
test1URL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Test/test1.txt")
test2URL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Test/test2.txt")
#Load csv data into tables
trainFull <- read.table(text = trainURL, sep = ",", header = TRUE)
test1Full <- read.table(text = test1URL, sep = ",", header = TRUE)
test2Full <- read.table(text = test2URL, sep = ",", header = TRUE)
rm(trainURL)
rm(test1URL)
rm(test2URL)
formatMhsmm <- function(data){
nb.sequences = nrow(data)
nb.observations = length(data)
#transform list to data frame
data_df <- data.frame(matrix(unlist(data), nrow = nb.sequences, byrow=F))
#iterate over these in loops
rows <- 1:nb.sequences
observations <- 0:(nb.observations-1)
#build vector with id values
id = numeric(length = nb.sequences*nb.observations )
for(i in rows)
{
for (j in observations)
{
id[i+j+(i-1)*(nb.observations-1)] = i
}
}
#build vector with observation values
sequences = numeric(length = nb.sequences*nb.observations)
for(i in rows)
{
for (j in observations)
{
sequences[i+j+(i-1)*(nb.observations-1)] = data_df[i,j+1]
}
}
data.df = data.frame(id, sequences)
#creation of hsmm.data object needed for training
N <- as.numeric(table(data.df$id))
train <- list(x = data.df$sequences, N = N)
class(train) <- "hsmm.data"
return(train)
}
library(mhsmm)
library(dplyr)
library(lubridate)
train <- trainFull[, c(1,3)]
colnames(train) <- c("DateTime", "Global_active_power")
train$DateTime <- paste(trainFull$Date, trainFull$Time)
train$DateTime <- as.POSIXct(train$DateTime, format='%d/%m/%Y %H:%M:%S')
train <- na.omit(train)
traindayform <- formatMhsmm(data.frame(train$Global_active_power))
# number of states HMM
k=8
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.3301653, 0.2730533, 4.5924386, 0.8581603, 2.1744369, 3.1150939, 0.5493970, 1.7928395)
sigmaVec <- c(0.0201126908, 0.0029628074, 1.1349055417, 0.1301456018, 0.2770119212, 0.3368303610, 0.0008511606, 0.0424565463)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm_8 <- hmmfit(traindayform$x, startmodel, mstep = mstep.norm,maxit = 200, tol=1e-02)
library(mhsmm)
library(dplyr)
library(lubridate)
train <- trainFull[, c(1,3)]
colnames(train) <- c("DateTime", "Global_active_power")
train$DateTime <- paste(trainFull$Date, trainFull$Time)
train$DateTime <- as.POSIXct(train$DateTime, format='%d/%m/%Y %H:%M:%S')
train <- na.omit(train)
test <- test1Full[, c(1,3)]
colnames(test) <- c("DateTime", "Global_active_power")
test$DateTime <- paste(test1Full$Date, test1Full$Time)
test$DateTime <- as.POSIXct(test$DateTime, format='%d/%m/%Y %H:%M:%S')
test <- na.omit(test)
traindayform <- formatMhsmm(data.frame(train$Global_active_power))
noramlform <- formatMhsmm(data.frame(train$Global_active_power[1:1000]))
testform <- formatMhsmm(data.frame(test$Global_active_power))
# number of states HMM
k=12
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5484832, 0.3271606, 0.2719592, 3.1713822, 1.2757978, 1.8831006, 0.8581603, 2.4676883, 0.5519891, 1.8237814, 1.5377176, 4.7048570)
sigmaVec <- c(0.0008257707, 0.0202114701, 0.0029434861, 0.3858464933, 0.0210970072, 0.0460559523, 0.1301456018, 0.0741345796, 0.0252060821,
0.4619841991, 0.0251711090, 1.0975356331)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm_12 <- hmmfit(traindayform$x, startmodel, mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm_12)
plot(hmm_12$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
yhat2 <- predict (hmm_12,noramlform$x)
yhat2$loglik
#plot(yhat1)
#plot(yhat2)
hmm_12$loglik[length(hmm_12$loglik)]
data <- test1Full
result <- predict (hmm_12,data)
data <- na.omit(test1Full)
data <- na.omit(test1Full$Global_active_power)
result <- predict (hmm_12,data)
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- as.data.frame(length(data), 2)
View(output)
output <- as.data.frame(1:length(data), 2)
View(output)
output <- as.data.frame(1:length(data), 1:2)
View(output)
output <- as.data.frame(matrix(0, ncol = 2, nrow = length(data)))
View(output)
for (j in 1:length(threshold)) {
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data$Global_active_power[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
} else {
output[i, 1] <- 0
output[i, 2] <- 0
}
}
outfile <- paste("point_",threshold[j],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
hmm <- hmm_12
for (j in 1:length(threshold)) {
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data$Global_active_power[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
} else {
output[i, 1] <- 0
output[i, 2] <- 0
}
}
outfile <- paste("point_",threshold[j],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
for (j in 1:length(threshold)) {
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
} else {
output[i, 1] <- 0
output[i, 2] <- 0
}
}
outfile <- paste("point_",threshold[j],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
View(output)
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[1]) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
result <- predict (hmm,data)
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- as.data.frame(matrix(0, ncol = 2, nrow = length(data)))
count <- 0
count <- count + 1
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- as.data.frame(matrix(0, ncol = 2, nrow = length(data)))
count <- 0
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[1]) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
library(mhsmm)
#separate the last 10% of train set as validationSet
validationset <- trainFull$Global_active_power[(nrow(trainFull)*0.9):nrow(trainFull)]
#add noises to data
corrupt <- rbinom(length(validationset),1,0.006)
corrupt <- as.logical(corrupt)
maxflownoise <- rnorm(sum(corrupt),12,1)
minflownoise <- rnorm(sum(corrupt),0,0.1)
validationset[corrupt] <- validationset[corrupt] + minflownoise + maxflownoise
print(validationset)
hmm <- hmm_8
result <- predict (hmm,validationset)
difference <- 0
threshold <- 2
totalAnomalies <- length(which(corrupt == TRUE))
detectedAnomalies <- 0
actualAnomalies <- 0
for (i in 1:length(validationset)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - validationset[i])
if (difference >= threshold) {
detectedAnomalies <- detectedAnomalies + 1
if (corrupt[i]) {
actualAnomalies <- actualAnomalies + 1
}
}
}
hmm <- hmm_12
state <- result$s[1]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[1])
data <- na.omit(test1Full$Global_active_power)
#data <- na.omit(test2Full$Global_active_power)
hmm <- hmm_12
result <- predict (hmm,data)
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- as.data.frame(matrix(0, ncol = 2, nrow = length(data)))
count <- 0
thresholdVal <- threshold[1]
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= thresholdVal) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
output <- matrix(0, ncol = 2, nrow = length(data))
data <- na.omit(test1Full$Global_active_power)
output <- matrix(0, ncol = 2, nrow = length(data))
View(output)
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= thresholdVal) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
View(output)
outfile <- paste("point_",threshold[1],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
for (j in 1:length(threshold)) {
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
outfile <- paste("point_",threshold[1],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- matrix(0, ncol = 2, nrow = length(data))
count <- 0
for (j in 1:length(threshold)) {
count <- 0
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
outfile <- paste("point_",threshold[j],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
data <- na.omit(test2Full$Global_active_power)
hmm <- hmm_12
result <- predict (hmm, data)
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- matrix(0, ncol = 2, nrow = length(data))
count <- 0
for (j in 1:length(threshold)) {
count <- 0
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
outfile <- paste("point_",threshold[j],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
percentAnomalous <- c(1:length(threshold))
data <- na.omit(test2Full$Global_active_power)
hmm <- hmm_12
result <- predict (hmm, data)
difference <- 0
threshold <- c(0.5, 1, 1.25 ,1.5, 1.75, 2)
output <- matrix(0, ncol = 2, nrow = length(data))
count <- 0
percentAnomalous <- c(1:length(threshold))
for (j in 1:length(threshold)) {
count <- 0
for (i in 1:length(data)) {
state <- result$s[i]
expected <- hmm$model$parms.emission$mu[state]
difference <- abs(expected - data[i])
if (difference >= threshold[j]) {
output[i, 1] <- 1
output[i, 2] <- 1
count <- count + 1
}
}
percentAnomalous[j] <- count / length(data)
outfile <- paste("point_",threshold[j],".txt",sep="")
write.table(output, file=outfile, sep=",",row.names=FALSE, col.names=FALSE)
}
percentAnomalous
