axis(side=1, at=c(2007, 2008, 2009))
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
plot(seq(2007,2009,0.5), seq(1,1.8,0.2), type="n", xlab="Year", ylab="Average Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
points(x, julyTrend, col="blue", pch=23)
overallTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007, ])
overallTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008, ])
overallTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2009, ])
overallTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
janTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & month(Date) == 1, ])
janTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & month(Date) == 1, ])
janTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2009 & month(Date) == 1, ])
janTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
julyTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & month(Date) == 7, ])
julyTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & month(Date) == 7, ])
julyTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2009 & month(Date) == 7, ])
julyTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Average Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
points(x, julyTrend, col="blue", pch=23)
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Average Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
points(x, julyTrend, col="blue", pch=24)
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Average Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
points(x, julyTrend, col="blue", pch=24)
lines(x, overallTrend, col="red")
lines(x, janTrend, col="green")
lines(x, julyTrend, col="blue")
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Average Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of January", "Trend of July") , lty=1, col=c("red","green", "blue"), bty='n', cex=.75)
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
points(x, julyTrend, col="blue", pch=24)
lines(x, overallTrend, col="red")
lines(x, janTrend, col="green")
lines(x, julyTrend, col="blue")
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of January", "Trend of July") , lty=1, col=c("red","green", "blue"), bty='n', cex=.75)
points(x, overallTrend, col="red")
points(x, janTrend, col="green", pch=22)
points(x, julyTrend, col="blue", pch=24)
lines(x, overallTrend, col="red")
lines(x, janTrend, col="green")
lines(x, julyTrend, col="blue")
tmp <- with(minutes, minutes[year(Date) == 2007 & (month(Date) <= 2 | month(Date) >= 11), ])
View(tmp)
sfTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
View(tmp)
winterTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & (month(Date) <= 2 | month(Date) >= 11), ])
winterTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & (month(Date) <= 2 | month(Date) >= 11), ])
winterTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2009 & (month(Date) <= 2 | month(Date) >= 11), ])
winterTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
summerTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & month(Date) >=5 & month(Date) <= 8, ])
summerTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & month(Date) >=5 & month(Date) <= 8, ])
summerTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2009 & month(Date) >=5 & month(Date) <= 8, ])
summerTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
sfTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
sfTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
sfTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
sfTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of Winter", "Trend of Summer", "Trend of Spring/Fall"),
lty=1, col=c("red","green", "blue"), bty='n', cex=.75)
points(x, overallTrend)
points(x, winterTrend, col="green", pch=22)
points(x, summerTrend, col="blue", pch=24)
points(x, sfTrend, col="red", pch=3)
lines(x, overallTrend)
lines(x, winterTrend, col="green")
lines(x, summerTrend, col="blue")
lines(x, sfTrend, col="red")
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of Winter", "Trend of Summer", "Trend of Spring/Fall"),
lty=1, col=c("red","green", "blue"), bty='n', cex=.75)
points(x, overallTrend)
points(x, winterTrend, col="green", pch=22)
points(x, summerTrend, col="blue", pch=24)
points(x, sfTrend, col="red", pch=3)
lines(x, overallTrend)
lines(x, winterTrend, col="green")
lines(x, summerTrend, col="blue")
lines(x, sfTrend, col="red")
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of Winter", "Trend of Summer", "Trend of Spring/Fall"),
lty=1, col=c("black", "red","green", "blue"), bty='n', cex=.75)
points(x, overallTrend)
points(x, winterTrend, col="green", pch=22)
points(x, summerTrend, col="blue", pch=24)
points(x, sfTrend, col="red", pch=3)
lines(x, overallTrend)
lines(x, winterTrend, col="green")
lines(x, summerTrend, col="blue")
lines(x, sfTrend, col="red")
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of Winter", "Trend of Summer", "Trend of Spring/Fall"),
lty=1, col=c("black", "green","blue", "red"), bty='n', cex=.75)
points(x, overallTrend)
points(x, winterTrend, col="green", pch=22)
points(x, summerTrend, col="blue", pch=24)
points(x, sfTrend, col="red", pch=3)
lines(x, overallTrend)
lines(x, winterTrend, col="green")
lines(x, summerTrend, col="blue")
lines(x, sfTrend, col="red")
sfTrend <- c(1:3)
tmp <- with(minutes, minutes[year(Date) == 2007 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
sfTrend[1] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2008 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
sfTrend[2] <- mean(tmp$Global_active_power, na.rm = TRUE)
tmp <- with(minutes, minutes[year(Date) == 2009 & ((month(Date) >= 3 & month(Date) <= 4) | (month(Date) >= 9 & month(Date) <= 10)), ])
sfTrend[3] <- mean(tmp$Global_active_power, na.rm = TRUE)
sfTrend
plot(seq(2007,2009,0.5), seq(0.7,1.9,0.3), type="n", xlab="Year", ylab="Global Active Power (kW)", xaxt="n")
axis(side=1, at=c(2007, 2008, 2009))
legend('topright', c("Overall Trend", "Trend of Winter", "Trend of Summer", "Trend of Spring/Fall"),
lty=1, col=c("black", "green","blue", "red"), bty='n', cex=.75)
points(x, overallTrend)
points(x, winterTrend, col="green", pch=22)
points(x, summerTrend, col="blue", pch=24)
points(x, sfTrend, col="red", pch=3)
lines(x, overallTrend)
lines(x, winterTrend, col="green")
lines(x, summerTrend, col="blue")
lines(x, sfTrend, col="red")
library(RCurl)
#Get URL's from GitHub for train and test data
trainURL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Train/train.txt")
test1URL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Test/test1.txt")
test2URL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Test/test2.txt")
#Load csv data into tables
trainFull <- read.table(text = trainURL, sep = ",", header = TRUE)
test1Full <- read.table(text = test1URL, sep = ",", header = TRUE)
test2Full <- read.table(text = test2URL, sep = ",", header = TRUE)
rm(trainURL)
rm(test1URL)
rm(test2URL)
View(trainFull)
View(test1Full)
library(mhsmm)
library(dplyr)
library(lubridate)
train <- trainFull[, c(1,3)]
colnames(train) <- c("DateTime", "Global_active_power")
train$DateTime <- paste(trainFull$Date, trainFull$Time)
train$DateTime <- as.POSIXct(train$DateTime, format='%d/%m/%Y %H:%M:%S')
train <- na.omit(train)
traindayform <- formatMhsmm(data.frame(train$Global_active_power))
# number of states HMM
k=12
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5484832, 0.3271606, 0.2719592, 3.1713822, 1.2757978, 1.8831006, 0.8581603, 2.4676883, 0.5519891, 1.8237814, 1.5377176, 4.7048570)
sigmaVec <- c(0.0008257707, 0.0202114701, 0.0029434861, 0.3858464933, 0.0210970072, 0.0460559523, 0.1301456018, 0.0741345796, 0.0252060821,
0.4619841991, 0.0251711090, 1.0975356331)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm_12 <- hmmfit(traindayform$x, startmodel, mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm_12)
plot(hmm_12$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
#yhat1 <- predict (hmm_12,traindayform$x)
#yhat2 <- predict (hmm_12,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm_12$loglik[length(hmm_12$loglik)]
formatMhsmm <- function(data){
nb.sequences = nrow(data)
nb.observations = length(data)
#transform list to data frame
data_df <- data.frame(matrix(unlist(data), nrow = nb.sequences, byrow=F))
#iterate over these in loops
rows <- 1:nb.sequences
observations <- 0:(nb.observations-1)
#build vector with id values
id = numeric(length = nb.sequences*nb.observations )
for(i in rows)
{
for (j in observations)
{
id[i+j+(i-1)*(nb.observations-1)] = i
}
}
#build vector with observation values
sequences = numeric(length = nb.sequences*nb.observations)
for(i in rows)
{
for (j in observations)
{
sequences[i+j+(i-1)*(nb.observations-1)] = data_df[i,j+1]
}
}
data.df = data.frame(id, sequences)
#creation of hsmm.data object needed for training
N <- as.numeric(table(data.df$id))
train <- list(x = data.df$sequences, N = N)
class(train) <- "hsmm.data"
return(train)
}
library(mhsmm)
library(dplyr)
library(lubridate)
train <- trainFull[, c(1,3)]
colnames(train) <- c("DateTime", "Global_active_power")
train$DateTime <- paste(trainFull$Date, trainFull$Time)
train$DateTime <- as.POSIXct(train$DateTime, format='%d/%m/%Y %H:%M:%S')
train <- na.omit(train)
traindayform <- formatMhsmm(data.frame(train$Global_active_power))
# number of states HMM
k=12
#init probabilities
init <- rep(1/k, k)
#transition matrix
P <- matrix(rep(1/k, k*k), nrow = k)
#emission matrix:  here I used a Gaussian distribution, replace muEst and sigmaEst by your initial estimates of mean and variance
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5484832, 0.3271606, 0.2719592, 3.1713822, 1.2757978, 1.8831006, 0.8581603, 2.4676883, 0.5519891, 1.8237814, 1.5377176, 4.7048570)
sigmaVec <- c(0.0008257707, 0.0202114701, 0.0029434861, 0.3858464933, 0.0210970072, 0.0460559523, 0.1301456018, 0.0741345796, 0.0252060821,
0.4619841991, 0.0251711090, 1.0975356331)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm_12 <- hmmfit(traindayform$x, startmodel, mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm_12)
plot(hmm_12$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
#yhat1 <- predict (hmm_12,traindayform$x)
#yhat2 <- predict (hmm_12,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm_12$loglik[length(hmm_12$loglik)]
test <- test1Full[, c(1,3)]
colnames(test) <- c("DateTime", "Global_active_power")
test$DateTime <- paste(test1Full$Date, test1Full$Time)
test$DateTime <- as.POSIXct(test$DateTime, format='%d/%m/%Y %H:%M:%S')
test <- na.omit(test)
testform <- formatMhsmm(data.frame(test$Global_active_power[1:1000]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
testform <- formatMhsmm(data.frame(test$Global_active_power[1:5]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
max(test$Global_active_power)
which.max( test$Global_active_power )
509959 + 2
testform <- formatMhsmm(data.frame(test$Global_active_power[509957:509961]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
noramlform <- formatMhsmm(data.frame(train$Global_active_power[1:5]))
testform <- formatMhsmm(data.frame(test$Global_active_power[1:5]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
yhat2 <- predict (hmm_12,noramlform$x)
yhat2$loglik
noramlform <- formatMhsmm(data.frame(train$Global_active_power[5:10]))
testform <- formatMhsmm(data.frame(test$Global_active_power[5:10]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
yhat2 <- predict (hmm_12,noramlform$x)
yhat2$loglik
noramlform <- formatMhsmm(data.frame(train$Global_active_power[10:15]))
testform <- formatMhsmm(data.frame(test$Global_active_power[10:15]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
yhat2 <- predict (hmm_12,noramlform$x)
yhat2$loglik
noramlform <- formatMhsmm(data.frame(train$Global_active_power[100:105]))
testform <- formatMhsmm(data.frame(test$Global_active_power[100:105]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
yhat2 <- predict (hmm_12,noramlform$x)
yhat2$loglik
noramlform <- formatMhsmm(data.frame(train$Global_active_power[1:1000]))
testform <- formatMhsmm(data.frame(test$Global_active_power[1:1000]))
yhat1 <- predict (hmm_12,testform$x)
yhat1$loglik
yhat2 <- predict (hmm_12,noramlform$x)
yhat2$loglik
randIndex <- sample(1:length(train), 1000)
length(train)
randIndex <- sample(1:length(train$Global_active_power), 1000)
lLikelihood <- c(1:1000)
randIndex <- sample(1:length(train$Global_active_power), 1000)
lLikelihood <- c(1:1000)
interval <- c(1:2)
for (i in 1:1000) {
if (randIndex[i] < (length(train$Global_active_power) - 101)) {
start <- randIndex[i]
end <- start + 100
}
else {
end <- randIndex[i]
start <- end - 100
}
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[i] <- yhat$loglik
}
interval[1] <- min(lLikelihood)
interval[2] <- max(lLikelihood)
LLmean <- mean(lLikelihood)
interval
LLmean
lLikelihood
randIndex <- sample(1:length(train$Global_active_power), 1000)
lLikelihood <- c(1:1000)
interval <- c(1:2)
for (i in 1:1000) {
if (randIndex[i] < (length(train$Global_active_power) - 11)) {
start <- randIndex[i]
end <- start + 10
}
else {
end <- randIndex[i]
start <- end - 10
}
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[i] <- yhat$loglik
}
interval[1] <- min(lLikelihood)
interval[2] <- max(lLikelihood)
LLmean <- mean(lLikelihood)
interval
LLmean
length(testform$x)
testform <- formatMhsmm(data.frame(test$Global_active_power))
length(testform$x)
seq(1, length(testform$x), by=10)
d <- as.data.frame(seq(1, length(testform$x), by=10))
View(d)
lLikelihood <- seq(1, length(testform$x), by=10)
bas(-10.4 - 19.2)
abs(-10.4 - 19.2)
abs(-10.4 - 19.2) / abs(-10.4)
lLikelihood <- seq(1, length(testform$x), by=10)
threshold <- 1
i <- 1
count <- 0
while (i <= (length(testform$x) - 10)) {
start <- i
end <- i + 10
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
if (abs((yhat$loglik - LLmean) / LLmean) > threshold) {
count <- count + 1
}
i <- end
}
lLikelihood <- seq(1, length(testform$x), by=10)
threshold <- 1
i <- 1
count <- 0
while (i <= (length(testform$x) - 10)) {
start <- i
end <- i + 10
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[i] <- yhat$loglik
if (abs((yhat$loglik - LLmean) / LLmean) > threshold) {
count <- count + 1
}
i <- i + 10
}
count
lLikelihood <- seq(1, length(testform$x), by=10)
lLikelihood <- seq(1, length(testform$x), by=10)
threshold <- 1
i <- 1
count <- 0
while (i <= (length(testform$x) - 10)) {
start <- i
end <- i + 10
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[i %% 10] <- yhat$loglik
if (abs((yhat$loglik - LLmean) / LLmean) > threshold) {
count <- count + 1
}
i <- i + 10
}
count
lLikelihood
step <- 10
randIndex <- sample(1:length(train$Global_active_power), 1000)
lLikelihood <- c(1:1000)
interval <- c(1:2)
for (i in 1:1000) {
if (randIndex[i] < (length(train$Global_active_power) - step + 1)) {
start <- randIndex[i]
end <- start + step
}
else {
end <- randIndex[i]
start <- end - step
}
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[i] <- yhat$loglik
}
interval[1] <- min(lLikelihood)
interval[2] <- max(lLikelihood)
LLmean <- mean(lLikelihood)
interval
LLmean
lLikelihood <- seq(1, length(testform$x), by=step)
threshold <- 1
i <- 1
k <- 1
count <- 0
while (i <= (length(testform$x) - step)) {
start <- i
end <- i + step
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[k] <- yhat$loglik
if ((abs(yhat$loglik - LLmean) / abs(LLmean)) > threshold) {
count <- count + 1
}
i <- i + step
k <- k + 1
}
count
lLikelihood
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
lLikelihood <- normalize(lLikelihood)
lLikelihood
lLikelihood <- seq(1, length(testform$x), by=step)
threshold <- 1
i <- 1
k <- 1
count <- 0
while (i <= (length(testform$x) - step)) {
start <- i
end <- i + step
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[k] <- yhat$loglik
if ((abs(yhat$loglik - LLmean) / abs(LLmean)) > threshold) {
count <- count + 1
}
i <- i + step
k <- k + 1
}
count
max(lLikelihood)
min(lLikelihood)
lLikelihood <- seq(1, length(testform$x), by=step)
threshold <- 1
i <- 1
k <- 1
count <- 0
while (i <= (length(testform$x) - step)) {
start <- i
end <- i + step
tmp <- formatMhsmm(data.frame(train$Global_active_power[start:end]))
yhat <- predict(hmm_12, tmp)
lLikelihood[k] <- yhat$loglik
if (yhat$loglik > (interval[2] + threshold) | yhat$loglik < (interval[1] -threshold)) {
count <- count + 1
}
i <- i + step
k <- k + 1
}
count
