startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5434765, 0.2718449, 1.9406663, 1.3333935, 1.5863192, 0.9073163, 2.5495831, 0.5730737, 1.2195497, 0.3322264, 4.7153127, 3.0768075)
sigmaVec <- c(0.0006766869, 0.0029243619, 0.1327686452, 0.0024440720, 0.0203675203, 0.1849620898, 0.0400385409, 0.0288136849, 0.0302078391,
0.0214063566, 1.0747935572, 0.4761798645)
b <- list(mu = muVec * 1.11, sigma = sigmaVec * 1.11)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[11] <- muVec[11] * 1.1
sigmaVec[11] <- sigmaVec[11] * 1.1
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[11] <- muVec[11] * 1.5
sigmaVec[11] <- sigmaVec[11] * 1.5
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[12] <- muVec[12] * 1.5
sigmaVec[12] <- sigmaVec[12] * 1.5
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[12] <- muVec[1] * 1.5
sigmaVec[12] <- sigmaVec[1] * 1.5
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(0.5427085, 0.2717396, 1.9205370, 1.5340814, 1.8948218, 0.8639836, 2.4972263, 0.5557900, 1.2684470, 0.3260740, 4.7438310, 3.2409747)
sigmaVec <- c(0.0006565098, 0.0029516832, 0.4878463312, 0.0250635757, 0.0488556551, 0.1393835599, 0.0590785138, 0.0258100300, 0.0203183930,
0.0216166930, 1.1067195246, 0.3433515456)
muVec[12] <- muVec[1] * 0.8
sigmaVec[12] <- sigmaVec[1] * 0.8
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
muVec[11] <- muVec[1] * 0.8
sigmaVec[11] <- sigmaVec[1] * 0.8
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
muVec[1] <- muVec[1] * 0.8
sigmaVec[1] <- sigmaVec[1] * 0.8
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
muVec <- c(1:k)
sigmaVec <- c(1:k)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
b <- list(mu = muVec, sigma = sigmaVec)
#starting model for EM
startmodel <- hmmspec(init = init, trans = P, parms.emis = b, dens.emis = dnorm.hsmm)
startmodel
#EM algorithm fits an HMM to the data
hmm <- hmmfit(traindayform$x, startmodel , mstep = mstep.norm,maxit = 200, tol=1e-02)
#print resulting HMM parameters
summary(hmm)
plot(hmm$loglik, type="b", ylab="log-likelihood", xlab="Iteration")
yhat1 <- predict (hmm,traindayform$x)
yhat2 <- predict (hmm,test1form$x)
#plot(yhat1)
#plot(yhat2)
hmm$loglik
library(RCurl)
#Get URL's from GitHub for train and test data
trainURL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Train/train.csv")
test1URL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Test/test_v1.csv")
test2URL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Test/test_v2.csv")
#Load csv data into tables
trainFull <- read.csv(text = trainURL)
test1Full <- read.csv(text = test1URL)
test2Full <- read.csv(text = test2URL)
rm(trainURL)
rm(test1URL)
rm(test2URL)
library(mhsmm)
J <- 2
init0 <- rep(1/J, J)
B0 <- list(mu = c(0.5,3), sigma = c(2.5, 1.5))
P <- matrix(c(0, 1/2,
1/2,0
), nrow = J)
P
M <- length(uni_train$power)
d0 <- cbind(dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000))
uni_test<- data.frame(as.numeric(test1Full$Global_active_power))
uni_test <- setNames(uni_test,c("power"))
uni_test$power[is.na(uni_test$power)] <- mean(na.omit(uni_test$power))
xtest1 <- list (x= data.frame(uni_test$power), N=length(uni_test$power))
xtest1$x <- data.matrix(xtest1$x, rownames.force = NA)
xtest1$x <- scale(xtest1$x)
class(xtest1) <- "hsmm.data"
traintest1 <- list (x= data.frame(trainFull$Global_active_power), N=length(trainFull$Date))
traintest1$x <- data.matrix(traintest1$x, rownames.force = NA)
traintest1$x <- scale(traintest1$x)
class(traintest1) <- "hsmm.data"
trans <- matrix(c(0, 0, 0, 1, 0, 1, 0, 1, 0), nrow = 3)
trains
trans
B0
P
J <- 12
init0 <- rep(1/J, J)
B0 <- list(mu = c(0.5,3), sigma = c(2.5, 1.5))
P <- diag(J) * 0.5
P
muVec <- c(1:J)
sigmaVec <- c(1:J)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
B0 <- list(mu = muVec, sigma = sigmaVec)
B0
M <- length(trainFull$Global_active_power)
d0 <- cbind(dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000))
d0
summary(d0)
P^-1
P <- matrix(J)
P
P <- matrix(, nrow = J, ncol = J)
P
P <- matrix(sample(0:1, J * J, replace = TRUE), J, J)
P
diag(P) <- 0
P
P <- matrix(sample(0:0.5, J * J, replace = TRUE), J, J)
diag(P) <- 0
P
P <- matrix(sample(0:1, J * J, replace = TRUE), J, J)
diag(P) <- 0
P
M <- length(trainFull$Global_active_power)
d0 <- cbind(dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000))
summary(d0)
daySub <- minutes %>% filter(Date >= '2007-01-11 1:39:00' & Date <= '2007-01-11 5:30:00')
library(zoo)
library(xts)
library(dplyr)
library(ggplot2)
library(lubridate)
apply.hourly <- function(x, FUN,...) {
ep <- endpoints(x, 'hours')
period.apply(x, ep, FUN, ...)
}
train <- trainFull[, c(2,4)]
train$DateTime <- paste(trainFull$Date, trainFull$Time)
train$DateTime <- as.POSIXct(train$DateTime, format='%d/%m/%Y %H:%M:%S')
train <- na.omit(train)
trainTS <- xts(train$Global_active_power, order.by = train$DateTime)
minutes <- fortify(trainTS)
hourly <- fortify(apply.hourly(trainTS,mean))
daily <- fortify(apply.daily(trainTS,mean))
monthly <- fortify(apply.monthly(trainTS,mean))
colnames(minutes) <- c("Date", "Global_active_power")
colnames(hourly) <- c("Date", "Global_active_power")
colnames(daily) <- c("Date", "Global_active_power")
colnames(monthly) <- c("Date", "Global_active_power")
daySub <- minutes %>% filter(Date >= '2007-01-11 1:39:00' & Date <= '2007-01-11 5:30:00')
View(daySub)
M <- length(trainFull$Global_active_power)
dTest <- cbind(dunif(1:M, 4, 30), dunif(1:M, 15 * 24, 40 * 24))
View(dTest)
summary(dunif(1:M, 15 * 24, 40 * 24))
s <- with( train , train[ Global_active_power <= 0.57 & Global_active_power >= 0.51, ] )
minutes %>% filter(Date >= '2007-01-11 1:39:00' & Date <= '2007-01-11 5:30:00')
daySub <- minutes %>% filter(Date >= '2007-01-11 00:01:00' & Date <= '2007-01-11 5:59:00')
minutes %>% filter(Date >= '2007-01-11 00:01:00' & Date <= '2007-01-11 5:59:00')
View(minutes)
J <- 12
init0 <- rep(1/J, J)
muVec <- c(1:J)
sigmaVec <- c(1:J)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
B0 <- list(mu = muVec, sigma = sigmaVec)
P <- matrix(sample(0:1, J * J, replace = TRUE), J, J)
diag(P) <- 0
M <- length(trainFull$Global_active_power)
dTest <- cbind(dunif(1:M, 4, 30), dunif(1:M, 15 * 24, 40 * 24))
d0 <- cbind(dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000),
dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000),
dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000), dunif(1:M, 1000, 8000))
startval <- hsmmspec(init0, P, parms.emis = B0, list(d = d0, type = "nonparametric"), dens.emis = dnorm.hsmm)
nnn <- traintest1$x[,1]
UniHSMM<- hsmmfit(nnn, startval, mstep = mstep.norm, M=1000)
summary(UniHSMM)
UniHSMMtrain <- predict.hsmm(UniHSMM,traintest1$x)
UniHSMMtest <- predict.hsmm(UniHSMM,xtest1$x)
plot(UniHSMMtrain)
#plot(UniHSMMtest)
UniHSMMtrain$s
UniHSMMtest$s
View(d0)
setDT(trainFull, keep.rownames = TRUE)[]
install.packages(data.table)
library(data.table)
install.packages("data.table")
library(data.table)
setDT(trainFull, keep.rownames = TRUE)[]
trainURL <- getURL("https://raw.githubusercontent.com/CMPT-318/Cybersecurity-Project/master/Data/Train/train.csv")
trainFull <- read.csv(text = trainURL)
trainTable <- setDT(trainFull, keep.rownames = TRUE)[]
trainFull <- read.csv(text = trainURL)
rm(trainURL)
rm(test1URL)
rm(test2URL)
traintest1 <- list (x= data.frame(na.omit(trainFull$Global_active_power)), N=length(trainFull$Date))
traintest1$x <- data.matrix(traintest1$x, rownames.force = NA)
traintest1$x <- scale(traintest1$x)
class(traintest1) <- "hsmm.data"
uni_test<- data.frame(as.numeric(na.omit(test1Full$Global_active_power)))
uni_test <- setNames(uni_test,c("power"))
uni_test$power[is.na(uni_test$power)] <- mean(na.omit(uni_test$power))
xtest1 <- list (x= data.frame(uni_test$power), N=length(uni_test$power))
xtest1$x <- data.matrix(xtest1$x, rownames.force = NA)
xtest1$x <- scale(xtest1$x)
class(xtest1) <- "hsmm.data"
View(trainTable)
trainTable <- trainTable[,c(1,3,5)]
View(trainTable)
View(trainTable)
trainSub <- trainTable %>% filter(DateTime >= '2007-01-11 00:01:00' & DateTime <= '2007-01-11 5:59:00')
trainTable$DateTime <- as.POSIXct(trainTable$DateTime, format='%d/%m/%Y %H:%M:%S')
trainSub <- trainTable %>% filter(DateTime >= '2007-01-11 00:01:00' & DateTime <= '2007-01-11 5:59:00')
View(trainSub)
View(trainTable)
trainSub <- with(trainTable, trainTable[month(DateTime) == 01,])
View(trainSub)
trainSub <- with(trainTable, trainTable[month(DateTime) == 1,])
View(trainSub)
View(trainTable)
trainTable$DateTime <- paste(trainFull$Date, trainFull$Time)
trainTable$DateTime <- as.POSIXct(trainTable$DateTime, format='%d/%m/%Y %H:%M:%S')
trainSub <- with(trainTable, trainTable[month(DateTime) == 1,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 &
hour(DateTime) >= 0 & hour(DateTime) <= 5,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 1
hour(DateTime) >= 0 & hour(DateTime) <= 5,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 1 &
hour(DateTime) >= 0 & hour(DateTime) <= 5,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 9 &
hour(DateTime) >= 0 & hour(DateTime) <= 5,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 9 &
hour(DateTime) >= 0 & hour(DateTime) <= 5,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 9 &
hour(DateTime) >= 7 & hour(DateTime) <= 9,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 9 &
hour(DateTime) >= 7 & hour(DateTime) <= 9,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 9 &
hour(DateTime) >= 10 & hour(DateTime) <= 12,])
View(trainSub)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 10 &
hour(DateTime) >= 10 & hour(DateTime) <= 12,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 10 &
hour(DateTime) >= 10 & hour(DateTime) <= 12,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 11 &
hour(DateTime) >= 12 & hour(DateTime) <= 14,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 11 &
hour(DateTime) >= 12 & hour(DateTime) <= 14,])
trainTable$DateTime <- as.POSIXct(trainTable$DateTime, format='%d/%m/%Y %H:%M:%S')
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 9 &
hour(DateTime) >= 14 & hour(DateTime) <= 17,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 9 &
hour(DateTime) >= 14 & hour(DateTime) <= 17,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 9 &
hour(DateTime) >= 14 & hour(DateTime) <= 17,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 10 &
hour(DateTime) >= 18 & hour(DateTime) <= 22,])
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 10 &
hour(DateTime) >= 18 & hour(DateTime) <= 22,])
J <- 12
init0 <- rep(1/J, J)
muVec <- c(1:J)
sigmaVec <- c(1:J)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
B0 <- list(mu = muVec, sigma = sigmaVec)
P <- matrix(sample(0:1, J * J, replace = TRUE), J, J)
diag(P) <- 0
M <- length(trainFull$Global_active_power)
d0 <- cbind(dunif(1:M, 33517, 33876), dunif(1:M, 294157, 294516), dunif(1:M, 33937, 34117), dunif(1:M, 294577, 294756),
dunif(1:M, 35557, 35736), dunif(1:M, 296197, 296376), dunif(1:M, 37117, 37296), dunif(1:M, 297757, 297936),
dunif(1:M, 34596, 34536), dunif(1:M, 294997, 295236), dunif(1:M, 36037, 36336), dunif(1:M, 296677, 296976))
startval <- hsmmspec(init0, P, parms.emis = B0, list(d = d0, type = "nonparametric"), dens.emis = dnorm.hsmm)
nnn <- traintest1$x[,1]
UniHSMM<- hsmmfit(nnn, startval, mstep = mstep.norm, M=1000)
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 1 & day(DateTime) == 9 &
hour(DateTime) >= 15 & hour(DateTime) <= 17,])
trainTable[, [294997:295236]]
trainTable[294997:295236]
trainSub <- with(trainTable, trainTable[year(DateTime) == 2007 & month(DateTime) == 7 & day(DateTime) == 9 &
hour(DateTime) >= 15 & hour(DateTime) <= 17,])
M <- length(trainFull$Global_active_power)
d0 <- cbind(dunif(1:M, 33517, 33876), dunif(1:M, 294157, 294516), dunif(1:M, 33937, 34117), dunif(1:M, 294577, 294756),
dunif(1:M, 35557, 35736), dunif(1:M, 296197, 296376), dunif(1:M, 37117, 37296), dunif(1:M, 297757, 297936),
dunif(1:M, 34417, 34596), dunif(1:M, 295057, 295236), dunif(1:M, 36037, 36336), dunif(1:M, 296677, 296976))
rm(dTest)
startval <- hsmmspec(init0, P, parms.emis = B0, list(d = d0, type = "nonparametric"), dens.emis = dnorm.hsmm)
nnn <- traintest1$x[,1]
UniHSMM<- hsmmfit(nnn, startval, mstep = mstep.norm, M=1000)
summary(UniHSMM)
UniHSMMtrain <- predict.hsmm(UniHSMM,traintest1$x)
UniHSMMtest <- predict.hsmm(UniHSMM,xtest1$x)
plot(UniHSMMtrain)
#plot(UniHSMMtest)
UniHSMMtrain$s
UniHSMMtest$s
dens <- density(na.omit(trainTable$Global_active_power))
plot(dens)
test <- trainFull$Global_active_power * 1000
rm(test)
###
#train data
traintest1 <- list (x= data.frame(na.omit(trainFull$Global_active_power * 1000)), N=length(trainFull$Date))
traintest1$x <- data.matrix(traintest1$x, rownames.force = NA)
traintest1$x <- scale(traintest1$x)
class(traintest1) <- "hsmm.data"
# end
uni_test<- data.frame(as.numeric(na.omit(test1Full$Global_active_power * 1000)))
uni_test <- setNames(uni_test,c("power"))
uni_test$power[is.na(uni_test$power)] <- mean(na.omit(uni_test$power))
xtest1 <- list (x= data.frame(uni_test$power), N=length(uni_test$power))
xtest1$x <- data.matrix(xtest1$x, rownames.force = NA)
xtest1$x <- scale(xtest1$x)
class(xtest1) <- "hsmm.data"
# create M-step
traintest1 <- list (x= data.frame(na.omit(trainFull$Global_active_power * 1000)), N=length(trainFull$Date))
traintest1$x <- data.matrix(traintest1$x, rownames.force = NA)
dens <- density(na.omit(trainTable$Global_active_power * 1000))
plot(dens)
traintest1$x <- scale(traintest1$x)
M <- length(trainFull$Global_active_power)
dens <- density(na.omit(trainTable$Global_active_power))
plot(dens)
dunif(1:M, 0.57, 0.52)
dunif(1:M, 0.57*1000, 0.52*1000)
dunif(1:M, 0.52*1000, 0.57*1000)
max(trainFull$Global_active_power)
max(na.omit(trainFull$Global_active_power))
max(na.omit(trainFull$Global_active_power)*1000)
sqrt(4)
d1 <- dunif(1:M, (muVec[1] + sqrt(sigmaVec[1])) * 1000, (muVec[1] - sqrt(sigmaVec[1])) * 1000)
d1 <- dunif(1:M,(muVec[1] - sqrt(sigmaVec[1])) * 1000, (muVec[1] + sqrt(sigmaVec[1])) * 1000)
d1
J <- 12
init0 <- rep(1/J, J)
muVec <- c(1:J)
sigmaVec <- c(1:J)
muVec <- c(0.5447714, 0.2779779, 1.8263834, 1.5501700, 1.9615561, 0.8685399, 2.7655574, 0.5594927, 1.2849762, 0.1710025, 4.1631672, 0.4510502)
sigmaVec <- c(0.000668871, 0.002888363, 0.486437022, 0.026234604, 0.061892010, 0.129187716, 0.235773146, 0.026516903, 0.020386461, 0.003444033,
1.131033014, 0.002118213)
B0 <- list(mu = muVec, sigma = sigmaVec)
P <- matrix(sample(0:1, J * J, replace = TRUE), J, J)
diag(P) <- 0
M <- max(na.omit(trainFull$Global_active_power) * 1000)
d1 <- dunif(1:M,(muVec[1] - sqrt(sigmaVec[1])) * 1000, (muVec[1] + sqrt(sigmaVec[1])) * 1000)
d2 <- dunif(1:M,(muVec[2] - sqrt(sigmaVec[2])) * 1000, (muVec[2] + sqrt(sigmaVec[2])) * 1000)
d3 <- dunif(1:M,(muVec[3] - sqrt(sigmaVec[3])) * 1000, (muVec[3] + sqrt(sigmaVec[3])) * 1000)
d4 <- dunif(1:M,(muVec[4] - sqrt(sigmaVec[4])) * 1000, (muVec[4] + sqrt(sigmaVec[4])) * 1000)
d5 <- dunif(1:M,(muVec[5] - sqrt(sigmaVec[5])) * 1000, (muVec[5] + sqrt(sigmaVec[5])) * 1000)
d6 <- dunif(1:M,(muVec[6] - sqrt(sigmaVec[6])) * 1000, (muVec[6] + sqrt(sigmaVec[6])) * 1000)
d7 <- dunif(1:M,(muVec[7] - sqrt(sigmaVec[7])) * 1000, (muVec[7] + sqrt(sigmaVec[7])) * 1000)
d8 <- dunif(1:M,(muVec[8] - sqrt(sigmaVec[8])) * 1000, (muVec[8] + sqrt(sigmaVec[8])) * 1000)
d9 <- dunif(1:M,(muVec[9] - sqrt(sigmaVec[9])) * 1000, (muVec[9] + sqrt(sigmaVec[9])) * 1000)
d10 <- dunif(1:M,(muVec[10] - sqrt(sigmaVec[10])) * 1000, (muVec[10] + sqrt(sigmaVec[10])) * 1000)
d11 <- dunif(1:M,(muVec[11] - sqrt(sigmaVec[11])) * 1000, (muVec[11] + sqrt(sigmaVec[11])) * 1000)
d12 <- dunif(1:M,(muVec[12] - sqrt(sigmaVec[12])) * 1000, (muVec[12] + sqrt(sigmaVec[12])) * 1000)
d0 <- cbind(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12)
startval <- hsmmspec(init0, P, parms.emis = B0, list(d = d0, type = "nonparametric"), dens.emis = dnorm.hsmm)
nnn <- traintest1$x[,1]
UniHSMM<- hsmmfit(nnn, startval, mstep = mstep.norm, M=M)
summary(UniHSMM)
UniHSMMtrain <- predict.hsmm(UniHSMM,traintest1$x)
UniHSMMtest <- predict.hsmm(UniHSMM,xtest1$x)
plot(UniHSMMtrain)
#plot(UniHSMMtest)
UniHSMMtrain$s
UniHSMMtest$s
rm(UniHSMM)
